# Урок 1. Ввод-Вывод, операторы ветвления
# Задача 2: Найдите сумму цифр трехзначного числа.
#
# *Пример:*
#
# 123 -> 6 (1 + 2 + 3)
# 100 -> 1 (1 + 0 + 0) |

# a = input('Введите число: ')
# print(int(a) // 100 + int(a) // 10 % 10 + int(a) % 10)
# print(int(a[0]) + int(a[1]) + int(a[2]))
# answer = 0
# for i in a:
#     answer += int(i)
# print(answer)

# Задача 4: Петя, Катя и Сережа делают из бумаги журавликов. Вместе они сделали S журавликов.
# Сколько журавликов сделал каждый ребенок, если известно, что Петя и Сережа сделали одинаковое
# количество журавликов, а Катя сделала в два раза больше журавликов, чем Петя и Сережа вместе?
#
# *Пример:*
#
# 6 -> 1  4  1
# 24 -> 4  16  4
#     60 -> 10  40  10
#
# count = int(input('Введите число готовых журавликов: '))
# # kate = s * 0.66
# # boy = (s - kate) / 2
# # print(round(boy), round(kate), round(boy))
#
# kate = count / 3 * 2
# boy = (count - kate) / 2
# print(int(boy), int(kate), int(boy))
#

# Задача 6: Вы пользуетесь общественным транспортом? Вероятно, вы расплачивались за проезд и получали билет
# с номером. Счастливым билетом называют такой билет с шестизначным номером, где сумма первых трех цифр
# равна сумме последних трех. Т.е. билет с номером 385916 – счастливый, т.к. 3+8+5=9+1+6.
# Вам требуется написать программу, которая проверяет счастливость билета.
#
# *Пример:*
#
# 385916 -> yes
# 123456 -> no

# a = input('Введете шестизначное число: ')
# d = int(a[0]) + int(a[1]) + int(a[2])
# n = int(a[3]) + int(a[4]) + int(a[5])
# if d == n:
#     print('yes')
# else:
#     print('no')

# Задача 8: Требуется определить, можно ли от шоколадки размером n × m долек отломить k долек,
# если разрешается сделать один разлом по прямой между дольками
# (то есть разломить шоколадку на два прямоугольника).
#
# *Пример:*
#
# 3 2 4 -> yes
# 3 2 1 -> no

# n = int(input('Введите кол-во квадратиков в длину шоколадки'))
# m = int(input('Введите кол-во квадратиков в ширину шоколадки'))
# k = int(input('Введите кол-во квадратиков, которые хотите отломить'))
# if k % n == 0 or k % m == 0:
#     print('yes')
# else:
#     print('no')


# урок 2
# Задача 10: На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом.
# Определите минимальное число монеток, которые нужно перевернуть,
# чтобы все монетки были повернуты вверх одной и той же стороной.
# Выведите минимальное количество монет, которые нужно перевернуть
#
# n = int(input('Введите кол-во монеток'))
# count_orel = 0
# count_reshka = 0
# for i in range(n):
#     x = int(input('Введите 1, если монетка лежит орлом вверх и 2, если решкой'))
#     if x == 1:
#         count_orel += 1
#     else:
#         count_reshka += 1
# if count_orel > count_reshka:
#     print(count_reshka)
# else:
#     print(count_orel)

# Задача 12: Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница.
# Петя помогает Кате по математике. Он задумывает два натуральных числа X и Y (X,Y≤1000),
# а Катя должна их отгадать. Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их
# произведение P. Помогите Кате отгадать задуманные Петей числа.
#
# s = int(input('Введите сумму загаданных чисел: '))
# p = int(input('Введите произведение загаданных чисел: '))
#
# x = 1
# while x - 1 != s:
#     b = s - x
#     if b * x == p:
#         print(x, b)
#         break
#     x += 1
# else:
#     print('Ошибка! Таких чисел нет!')

# Задача 14: Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числа N.
#
# n = int(input('Введите число N: '))
# a = 0
# while 2 ** a <= n:
#     print(2 ** a, end=" ")
#     a += 1

# Урок 3. Списки и словари
# Задача 16: Требуется вычислить, сколько раз встречается некоторое число X в массиве A[1..N].
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X
#
# *Пример:*
# #
# # 5
# #     1 2 3 4 5
# #     3
# #     -> 1
#
# n = int(input('Введите кол-во элементов в списке'))
# mas = []
# for i in range(n):
#     a = int(input('Введите число'))
#     mas.append(a)
# x = int(input('Введите искомое число'))
# print(mas.count(x))
#

# Задача 18: Требуется найти в массиве A[1..N] самый близкий по величине элемент к
# заданному числу X. Пользователь в первой строке вводит натуральное число N – количество
# элементов в массиве. В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X
#
# *Пример:*
#
# 5
#     1 2 3 4 5
#     6
#     -> 5

#
# n = abs(int(input('Введите количество элементов массива А: ')))
# Ai = input("Введите целые числа: ").split()
# A = list(map(int, Ai))
# if len(A) != n or n == 0:
#     print('Введенные элементы не соответствуют заявленному количеству')
# else:
#
#     X = int(input('Введите число X, с которым необходимо сравнивать элементы списка: '))
#     min = abs(X - A[0])
#     index = 0
#     for i in range(1, n):
#         count = abs(X - A[i])
#         if count < min:
#             min = count
#             index = i
#     print(
#         f'Число {A[index]} в списке A наиболее близко по величине к числу {X}, их разница составляет {abs(X - A[index])}')
# #
# Урок 4. Словари, множества и профилирование
# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества.
# Затем пользователь вводит сами элементы множеств.
#
# a = int(input('кол-во элементов первого множества'))
# b = int(input('кол-во элементов второго множества'))
# c = set()
# d = set()
# for i in range(a):
#     x = int(input('введите элемент первого массива'))
#     c.add(x)
# for y in range(b):
#     x = int(input('введите элемент второго массива'))
#     d.add(x)
# h = c & d
# print(*sorted(h))


#
# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, причём кусты высажены только
# по окружности. Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте
# выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и
# нескольких собирающих модулей. Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает
# ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, находясь
# перед некоторым кустом заданной во входном файле грядки.
#
# n = int(input('введите кол-во кустов на грядке: '))
# z = []
# for i in range(n):
#     x = int(input('кол-во ягод на кусте: '))
#     z.append(x)
# d = []
# for i in range(len(z[1:])):
#     d.append(z[i-1] + z[i] + z[i+1])
# d.append(z[-2] + z[-1] + z[0])
# print(max(d))



# Урок 5. Рекурсия и алгоритмы
# Задача 26:  Напишите программу, которая на вход принимает два числа A и B, и возводит число А в целую степень B с
# помощью рекурсии.
#
# *Пример:*
#
# A = 3; B = 5 -> 243 (3⁵)
#     A = 2; B = 3 -> 8
#
# def function(a, b):
#     if b > 1:
#         a *= function(a, b-1)
#     return a
#
# print(function(5, 3))

# Задача 28: Напишите рекурсивную функцию sum(a, b), возвращающую сумму двух целых неотрицательных чисел.
# Из всех арифметических операций допускаются только +1 и -1. Также нельзя использовать циклы.
#
# *Пример:*
#
# 2 2
#     4
#
# def summ(a, b):
#     if b > 0:
#         a = summ(a + 1, b - 1)
#     return a
# print(summ(10,12))


# Урок 6. Повторение списков
# Задача 30:  Заполните массив элементами арифметической прогрессии. Её первый элемент, разность и
# количество элементов нужно ввести с клавиатуры. Формула для получения n-го члена прогрессии: an = a1 + (n-1) * d.
# Каждое число вводится с новой строки.
# #
# a = int(input('введите первый элемент: '))
# b = int(input('введите разность: '))
# c = int(input('введите кол-во: '))
# g = []
# for i in range(c):
#     g.append(a)
#     a += b
# print(g)

# Задача 32: Определить индексы элементов массива (списка), значения которых принадлежат заданному диапазону
# (т.е. не меньше заданного минимума и не больше заданного максимума)

# a = [i for i in range(1, 30)]
# minn = int(input('введите минимльное число'))
# maxx = int(input('введите минимльное число'))
# b = []
# for i in range(len(a)):
#     if minn <= a[i] <= maxx:
#         b.append(i)
# print(b)

#
# Урок 7. Функции высшего порядка
# Задача 34:  Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку разобраться в его кричалках не
# настолько просто, насколько легко он их придумывает, Вам стоит написать программу. Винни-Пух считает, что ритм есть,
# если число слогов (т.е. число гласных букв) в каждой фразе стихотворения одинаковое. Фраза может состоять из одного слова,
# если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг от друга пробелами. Стихотворение
# Винни-Пух вбивает в программу с клавиатуры. В ответе напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”,
# если с ритмом все не в порядке
#
# *Пример:*
#
# **Ввод:** пара-ра-рам рам-пам-папам па-ра-па-да
#     **Вывод:** Парам пам-пам
#
# fras = input("Введите стихотворение:  ").lower()
# a = list(map(lambda x: sum([x.count(i) for i in "ауоыиэяюёе"]), fras.split()))
# print("Парам пам-пам" if all([a[0] == i for i in a]) else "Пам парам")
#




# Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6), которая принимает в качестве
# аргумента функцию, вычисляющую элемент по номеру строки и столбца. Аргументы num_rows и num_columns указывают число строк
# и столбцов таблицы, которые должны быть распечатаны. Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).
# Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, у операции умножения.
#
# *Пример:*
#
# **Ввод:** `print_operation_table(lambda x, y: x * y) `
# **Вывод:**
# 1 2 3 4 5 6
# 2 4 6 8 10 12
# 3 6 9 12 15 18
# 4 8 12 16 20 24
# 5 10 15 20 25 30
# 6 12 18 24 30 36


# def print_operation_table(operation, num_rows=6, num_columns=6):
#     for i in range(1, num_rows + 1):
#         for y in range(1, num_columns + 1):
#             print(operation(i, y), end=" ")
#         print()
#
# print_operation_table(lambda x, y: x * y)

#
# Задача 38: Дополнить телефонный справочник возможностью изменения и удаления данных. Пользователь также может
# ввести имя или фамилию, и Вы должны реализовать функционал для изменения и удаления данных


print("Выберите что Вы хотите сделать со справочником:\n1 - показать все номера\n2 - показать номер телефона"
      " конкретного абонетна\n3 - добавить нового абонента\n4 - удалить абонента\n0 - выйти из справочника")
answer = int(input("Укажите режим работы: "))

while answer != 0:
    if answer == 1:
        with open("sprawochnik.txt", "r") as file:
            print("Имя абонента        Фамилия абонента      Номер телефона        Адрес")
            for i in file:

                print(i.split()[0] + " " + i.split()[1] + " " + i.split()[2] + " " + i.split()[3])
    elif answer == 2:
        name = input("Введите имя абонента: ").strip()
        with open("sprawochnik.txt", "r") as file:
            for i in file:
                if i.split()[0].lower() == name.lower():
                    print(f"Номер абонента: {i.split()[2]}")
                    break
            else:
                print("Такого абонента нет")
    elif answer == 3:
        new_name = input("Введите имя абонента: ").strip().title()
        new_surname = input("Введите фамилию абонента: ").strip().title()
        new_phone = input("Введите номер абонента: ").strip()
        new_adres = input("Введите адрес абонента: ").strip()
        with open("sprawochnik.txt", "a") as file:
            file.write(f"{new_name} {new_surname} {new_phone} {new_adres}\n")
            print("Абонент успешно добавлен!")
    elif answer == 4:
        delete_name = input("Введите имя абонента: ").strip().title()
        with open("sprawochnik.txt", "w+") as file:
            for i in file:
                if i.split()[0].title() != delete_name:
                    file.write(f"{i[0]} {i[1]} {i[2]} {i[3]}\n")
            print("Абонент успешно удален!")



    answer = int(input("Укажите режим работы: "))

print("До свидания!")

